df_ws = left_join(df_ws, df_rgdp)
df_ws = left_join(df_ws, df_gdpnow)
df_ws = df_ws[rowSums(is.na(df_ws[ , 2:5])) < 4 , ]  # This removes all dates that have no values
# Fill in GDP field with 1's if there is a gdp-now value with no corresponding GDP value
df_ws$rgdp = ifelse(is.na(df_ws$rgdp) & !is.na(df_ws$gdpnow), 0, df_ws$rgdp)
# Fill in NA's with previous values
df_ws = df_ws %>%
fill(Baa_yield, cpi, rgdp, gdpnow, .direction = "down")
# CPI 7 year deflators
df_ws = df_ws %>%
mutate(cpi_sma7yr = rollmean(cpi, k = 1750, align = "right", fill = NA)) # CPI at SMA7YR
df_ws = df_ws %>%
mutate(cpi_ema7yr = EMA(cpi, n=1750))  # CPI at EMA7YR
# Formula to deflate nominal yield by inflation
# (1 + yield decimal format ) / (1 + inflation rate)
# Ex: 5% yield; 3% inflation
# Real_yield = (1 + 0.05) / (1 + 0.03)
df_ws = df_ws %>%
mutate(Baa_yield_real = 100 * ((1 + Baa_yield/100) / (1 + cpi_sma7yr/100) - 1))
df_ws = df_ws %>%
mutate(rgdp_yoy = ((rgdp - lag(rgdp, n = 250))  / lag(rgdp, n = 250)) * 100)  %>% # Real GDP YoY%
mutate(rgdp_yoy = ifelse(df_ws$rgdp == 0, df_ws$gdpnow, df_ws$rgdp_yoy)) %>%  # Use gdpnow instead of rgdp for recent real gdp growth rates
mutate(rgdp_yoy_sma7yr = rollmean(rgdp_yoy, k = 1750, align = "right", fill = NA))  %>%  # SMA 7 Years of Real GDP YOY% Long term Average
mutate(rgdp_yoy_sma7yr_test = zoo::rollmean(rgdp_yoy, k = 10, align = "right", fill = NA))
df_ws = df_ws[-c(1:1770), ]
df_ws = df_ws %>%
mutate(rgdp_yoy = ((rgdp - lag(rgdp, n = 250))  / lag(rgdp, n = 250)) * 100)  %>% # Real GDP YoY%
df_ws$rgdp_yoy = ifelse(df_ws$rgdp == 0, df_ws$gdpnow, df_ws$rgdp_yoy)   # Use gdpnow instead of rgdp for recent real gdp growth rates
# get Moody' Seasoned Baa Corporate Bond Yield
df_Baa = as_tibble(get_fred_series("DBAA", series_name = "DBAA"))
names(df_Baa) = c("date", "Baa_yield")
df_Baa = na.omit(df_Baa)
df_Baa = pad(df_Baa)  # This fills in the first of the month days that are needed to merge with the monthly data
# Get CPI Rate
df_cpi = as_tibble(Quandl(c("RATEINF/INFLATION_USA"), start_date = "1986-01-02", api_key="U1usUjGpznoGBsEUxb1x"))
names(df_cpi) = c("date", "cpi")
df_cpi = arrange(df_cpi, date)
# Get Real GDP
df_rgdp = as_tibble(get_fred_series("GDPC1", series_name = "GDPC1"))
names(df_rgdp) = c("date", "rgdp")
# Get GDPnow data
df_gdpnow = as_tibble(get_fred_series("GDPNOW", series_name = "GDPNOW"))
names(df_gdpnow) = c("date", "gdpnow")
# Merge BAA & CPI and fill in NA's
df_ws = left_join(df_Baa, df_cpi)
df_ws = left_join(df_ws, df_rgdp)
df_ws = left_join(df_ws, df_gdpnow)
df_ws = df_ws[rowSums(is.na(df_ws[ , 2:5])) < 4 , ]  # This removes all dates that have no values
# Fill in GDP field with 1's if there is a gdp-now value with no corresponding GDP value
df_ws$rgdp = ifelse(is.na(df_ws$rgdp) & !is.na(df_ws$gdpnow), 0, df_ws$rgdp)
# Fill in NA's with previous values
df_ws = df_ws %>%
fill(Baa_yield, cpi, rgdp, gdpnow, .direction = "down")
# CPI 7 year deflators
df_ws = df_ws %>%
mutate(cpi_sma7yr = rollmean(cpi, k = 1750, align = "right", fill = NA)) # CPI at SMA7YR
df_ws = df_ws %>%
mutate(cpi_ema7yr = EMA(cpi, n=1750))  # CPI at EMA7YR
df_ws = df_ws %>%
mutate(Baa_yield_real = 100 * ((1 + Baa_yield/100) / (1 + cpi_sma7yr/100) - 1))
df_ws = df_ws %>%
mutate(rgdp_yoy = ((rgdp - lag(rgdp, n = 250))  / lag(rgdp, n = 250)) * 100)  %>% # Real GDP YoY%
df_ws$rgdp_yoy = ifelse(df_ws$rgdp == 0, df_ws$gdpnow, df_ws$rgdp_yoy)   # Use gdpnow instead of rgdp for recent real gdp growth rates
df_ws = df_ws %>%
mutate(rgdp_yoy = ((rgdp - lag(rgdp, n = 250))  / lag(rgdp, n = 250)) * 100)  # Real GDP YoY%
df_ws$rgdp_yoy = ifelse(df_ws$rgdp == 0, df_ws$gdpnow, df_ws$rgdp_yoy)   # Use gdpnow instead of rgdp for recent real gdp growth rates
df_ws = df_ws %>%
mutate(rgdp_yoy_sma7yr = rollmean(rgdp_yoy, k = 1750, align = "right", fill = NA))  %>%  # SMA 7 Years of Real GDP YOY% Long term Average
mutate(rgdp_yoy_sma7yr_test = zoo::rollmean(rgdp_yoy, k = 10, align = "right", fill = NA))
View(df_ws)
df_ws = df_ws[-c(1:1770), ]
df_ws = df_ws %>%
mutate(wick_spread = Baa_yield_real - rgdp_yoy )
last_value = round(last(df_ws$wick_spread), 2)
theme_set(theme_bw())
ggplot(data = df_ws, aes(x = date, y = wick_spread)) +
geom_line(aes() ) +
geom_hline(aes(yintercept = -0.3), color="red", linetype="dashed") +
geom_hline(aes(yintercept = 1.70), color="red", linetype="dashed") +
add_rec_shade(min(as.Date("1995-01-01", "%Y-%m-%d")),max(df_ws$date)) +
annotate("rect", xmin = as.Date("1993-01-01", "%Y-%m-%d"), xmax = Sys.Date(), ymin = -0.30, ymax = 1.70, fill = "green", alpha = .2, color = NA) +
labs(x = "Date") +
labs(subtitle = "Spread: real Baa yields - GDP Growth \nWicksellian optimum: -0.3% - 1.7%") +
labs(y = "Wick Spread") +
labs(title = "Wicksellian Spread") +
labs(caption = "Note: GDP augmented with GDPnow forecasts from Atlanta Fed") +
scale_x_date(date_breaks = "5 years", labels=date_format("%Y")) +
geom_text(aes(x = as.Date("1997-01-01", "%Y-%m-%d"), y = 10,
label = "Market rate too high: \n recession or depression risk ")) +
geom_text(aes(x = as.Date("1997-01-01", "%Y-%m-%d"), y = -7,
label = "Market rate too low: \n inflation risk ")) +
geom_dl(aes(label=last_value)
, method = list("last.qp"))
# Makes knitr ignore errors in chunks
knitr::opts_chunk$set(error = TRUE)
# Tidy libraries
# install.packages("devtools")
# devtools::install_github("business-science/tidyquant")
# install.packages("broom")
library(knitr)
library(tidyverse)
library(tidyr)
library(tibble)
library(lubridate)
library(TTR)
library(tidyquant)
library(broom)
library(corrr)
library(alfred)
library(RcppRoll)
library(Hmisc)
library(kableExtra)
library(huxtable)
library(pracma)
library(gridExtra)
library(xts)
library(scales)
library(directlabels)
library(ggthemes)
library(ggfortify)
library(zoo)  # used for rollmean
library(padr)
library(roll)
# Data acquisition libraries
library(Quandl)
library(quantmod)
library(fredr)  # Fred
library(imfr, warn.conflicts = FALSE, quietly=TRUE)  # IMF
library(gdata)
library(readxl)
library(rstudioapi)
library(openxlsx)
library(fpp2)  # Hyndman Forecast package
library(DataCombine)
# User defined functions
source("./chart_recession.R")  # for add_rec_shade recession shading function
# source("./signal_aggregation_functions.R")
# source("./financial_functions.R")
# source("./cycleanalytics.R")
# get Moody' Seasoned Baa Corporate Bond Yield
df_Baa = as_tibble(get_fred_series("DBAA", series_name = "DBAA"))
names(df_Baa) = c("date", "Baa_yield")
df_Baa = na.omit(df_Baa)
df_Baa = pad(df_Baa)  # This fills in the first of the month days that are needed to merge with the monthly data
# Get CPI Rate
df_cpi = as_tibble(Quandl(c("RATEINF/INFLATION_USA"), start_date = "1986-01-02", api_key="U1usUjGpznoGBsEUxb1x"))
names(df_cpi) = c("date", "cpi")
df_cpi = arrange(df_cpi, date)
# Get Real GDP
df_rgdp = as_tibble(get_fred_series("GDPC1", series_name = "GDPC1"))
names(df_rgdp) = c("date", "rgdp")
# Get GDPnow data
df_gdpnow = as_tibble(get_fred_series("GDPNOW", series_name = "GDPNOW"))
names(df_gdpnow) = c("date", "gdpnow")
# Merge BAA & CPI and fill in NA's
df_ws = left_join(df_Baa, df_cpi)
df_ws = left_join(df_ws, df_rgdp)
df_ws = left_join(df_ws, df_gdpnow)
df_ws = df_ws[rowSums(is.na(df_ws[ , 2:5])) < 4 , ]  # This removes all dates that have no values
# Fill in GDP field with 1's if there is a gdp-now value with no corresponding GDP value
df_ws$rgdp = ifelse(is.na(df_ws$rgdp) & !is.na(df_ws$gdpnow), 0, df_ws$rgdp)
# Fill in NA's with previous values
df_ws = df_ws %>%
fill(Baa_yield, cpi, rgdp, gdpnow, .direction = "down")
View(df_cpi)
View(df_gdpnow)
View(df_rgdp)
View(df_rgdp)
View(df_ws)
# CPI 7 year deflators
df_ws = df_ws %>%
mutate(cpi_sma7yr = rollmean(cpi, k = 1750, align = "right", fill = NA)) # CPI at SMA7YR
df_ws = df_ws %>%
mutate(cpi_ema7yr = EMA(cpi, n=1750))  # CPI at EMA7YR
# Formula to deflate nominal yield by inflation
# (1 + yield decimal format ) / (1 + inflation rate)
# Ex: 5% yield; 3% inflation
# Real_yield = (1 + 0.05) / (1 + 0.03)
df_ws = df_ws %>%
mutate(Baa_yield_real = 100 * ((1 + Baa_yield/100) / (1 + cpi_sma7yr/100) - 1))
df_ws = df_ws %>%
mutate(rgdp_yoy = ((rgdp - lag(rgdp, n = 250))  / lag(rgdp, n = 250)) * 100)  # Real GDP YoY%
df_ws$rgdp_yoy = ifelse(df_ws$rgdp == 0, df_ws$gdpnow, df_ws$rgdp_yoy)   # Use gdpnow instead of rgdp for recent real gdp growth rates
df_ws = df_ws %>%
mutate(rgdp_yoy_sma7yr = rollmean(rgdp_yoy, k = 1750, align = "right", fill = NA))  %>%  # SMA 7 Years of Real GDP YOY% Long term Average
mutate(rgdp_yoy_sma7yr_test = zoo::rollmean(rgdp_yoy, k = 10, align = "right", fill = NA))
df_ws = df_ws[-c(1:1770), ]
# Wick Spread = Market Rate (Baa_yield_real_sma7yr) - Real Rate (rgdp_yoy_sma7yr)
df_ws = df_ws %>%
mutate(wick_spread = Baa_yield_real - rgdp_yoy )
last_value = round(last(df_ws$wick_spread), 2)
theme_set(theme_bw())
ggplot(data = df_ws, aes(x = date, y = wick_spread)) +
geom_line(aes() ) +
geom_hline(aes(yintercept = -0.3), color="red", linetype="dashed") +
geom_hline(aes(yintercept = 1.70), color="red", linetype="dashed") +
add_rec_shade(min(as.Date("1995-01-01", "%Y-%m-%d")),max(df_ws$date)) +
annotate("rect", xmin = as.Date("1993-01-01", "%Y-%m-%d"), xmax = Sys.Date(), ymin = -0.30, ymax = 1.70, fill = "green", alpha = .2, color = NA) +
labs(x = "Date") +
labs(subtitle = "Spread: real Baa yields - GDP Growth \nWicksellian optimum: -0.3% - 1.7%") +
labs(y = "Wick Spread") +
labs(title = "Wicksellian Spread") +
labs(caption = "Note: GDP augmented with GDPnow forecasts from Atlanta Fed") +
scale_x_date(date_breaks = "5 years", labels=date_format("%Y")) +
geom_text(aes(x = as.Date("1997-01-01", "%Y-%m-%d"), y = 10,
label = "Market rate too high: \n recession or depression risk ")) +
geom_text(aes(x = as.Date("1997-01-01", "%Y-%m-%d"), y = -7,
label = "Market rate too low: \n inflation risk ")) +
geom_dl(aes(label=last_value)
, method = list("last.qp"))
View(df_ws)
# Makes knitr ignore errors in chunks
knitr::opts_chunk$set(error = TRUE)
# Get data from BLS
df_joc = get_n_series_table(
list( copper ='wpu102301', cotton = 'wpu015', natgas = 'wpu0531', burlap = 'wpu033703', copper_nickel = 'wpu102', steelscrap = 'wpu1012', zinc = 'wpu102303', aluminum = 'wpu102302', hides = 'wpu041', rubber = 'wpu071', tallow = 'wpu06410132', plywood = 'wpu083', hardwood = 'wpu0812', aromatics = 'wpu06140197', crudepetroleum = 'wpu056', cpi = 'CUUR0000SA0'),
api_key = "9f4c1becb3c546b689e1b9804d877d1e",
start_year = 2005, end_year=2023, tidy=TRUE
)
# Create date from Mon and Year
df_joc = df_joc %>%
mutate(df_joc, date=paste(year,month,1,sep="-"))
df_joc$date = ymd(df_joc$date)
# Make date first column
df_joc = df_joc %>% relocate(date)
# Remove Mon and Year
df_joc <- subset(df_joc, select = -c(year, month))
# Fill NA's with previous value
df_joc <- fill(df_joc, names(df_joc))
# Create equal weighted composite
df_joc$joc_eq_wt = rowSums(df_joc[, -1]) / 15
# Regression weighted joc where raw materials regressed to 13 mo lagged CPI
df_joc = df_joc%>%
mutate(joc = (45.5 + 0.17667*burlap + 0.11720*copper_nickel + 0.02263*steelscrap +
0.02464*zinc + -0.08892*aluminum + -0.05234*hides + 0.19107*rubber + 0.03579*plywood + 0.23274*hardwood + -0.03858*crudepetroleum))
# Scale Values to 100
df_joc = df_joc %>%
mutate_each(funs(./.[1]*100), setdiff(names(.), "date"))
# lag CPI by 13 months
df_joc$cpilag13 = dplyr::lead(df_joc$cpi, n=13)
df_joc_mod = df_joc
# Tidy libraries
# install.packages("devtools")
# devtools::install_github("business-science/tidyquant")
# install.packages("broom")
library(knitr)
library(tidyverse)
library(tidyr)
library(tibble)
library(lubridate)
library(TTR)
library(tidyquant)
library(broom)
library(corrr)
library(alfred)
library(RcppRoll)
library(Hmisc)
library(kableExtra)
library(huxtable)
library(pracma)
library(gridExtra)
library(xts)
# library(scales)  # Conflict with purr()
library(directlabels)
library(ggthemes)
library(ggfortify)
library(zoo)  # used for rollmean
library(padr)
library(roll)
# Data acquisition libraries
library(Quandl)
library(quantmod)
library(fredr)  # Fred
library(imfr, warn.conflicts = FALSE, quietly=TRUE)  # IMF
library(gdata)
library(readxl)
library(rstudioapi)
library(openxlsx)
library(fpp2)  # Hyndman Forecast package
library(DataCombine)
# Specific API  data
# library(devtools)
# install_github('mikeasilva/blsAPI')
# library(blsAPI)
library(blsR)
# User defined functions
source("./chart_recession.R")  # for add_rec_shade recession shading function
# source("./signal_aggregation_functions.R")
# source("./financial_functions.R")
# source("./cycleanalytics.R")
##----------------------------------------------------------------------------------##
## File:        InflationGraderv1.Rmd
##
## Description:  Develop a FIG clone
##----------------------------------------------------------------------------------##
# Makes knitr ignore errors in chunks
# rm(list=ls())
# Makes knitr ignore errors in chunks
knitr::opts_chunk$set(error = TRUE)
# Tidy libraries
# install.packages("devtools")
# devtools::install_github("business-science/tidyquant")
# install.packages("broom")
library(knitr)
library(tidyverse)
library(tidyr)
library(tibble)
library(lubridate)
library(TTR)
library(tidyquant)
library(broom)
library(corrr)
library(alfred)
library(RcppRoll)
library(Hmisc)
library(kableExtra)
library(huxtable)
library(pracma)
library(gridExtra)
library(xts)
# library(scales)  # Conflict with purr()
library(directlabels)
library(ggthemes)
library(ggfortify)
library(zoo)  # used for rollmean
library(padr)
library(roll)
# Data acquisition libraries
library(Quandl)
library(quantmod)
library(fredr)  # Fred
library(imfr, warn.conflicts = FALSE, quietly=TRUE)  # IMF
library(gdata)
library(readxl)
library(rstudioapi)
library(openxlsx)
library(fpp2)  # Hyndman Forecast package
library(DataCombine)
# Specific API  data
# library(devtools)
# install_github('mikeasilva/blsAPI')
# library(blsAPI)
library(blsR)
# User defined functions
source("./chart_recession.R")  # for add_rec_shade recession shading function
# source("./signal_aggregation_functions.R")
# source("./financial_functions.R")
# source("./cycleanalytics.R")
options(digits = 4)
options(scipen=999)
# Get data from BLS
df_joc = get_n_series_table(
list( copper ='wpu102301', cotton = 'wpu015', natgas = 'wpu0531', burlap = 'wpu033703', copper_nickel = 'wpu102', steelscrap = 'wpu1012', zinc = 'wpu102303', aluminum = 'wpu102302', hides = 'wpu041', rubber = 'wpu071', tallow = 'wpu06410132', plywood = 'wpu083', hardwood = 'wpu0812', aromatics = 'wpu06140197', crudepetroleum = 'wpu056', cpi = 'CUUR0000SA0'),
api_key = "9f4c1becb3c546b689e1b9804d877d1e",
start_year = 2005, end_year=2023, tidy=TRUE
)
# Create date from Mon and Year
df_joc = df_joc %>%
mutate(df_joc, date=paste(year,month,1,sep="-"))
df_joc$date = ymd(df_joc$date)
# Make date first column
df_joc = df_joc %>% relocate(date)
# Remove Mon and Year
df_joc <- subset(df_joc, select = -c(year, month))
# Fill NA's with previous value
df_joc <- fill(df_joc, names(df_joc))
# Create equal weighted composite
df_joc$joc_eq_wt = rowSums(df_joc[, -1]) / 15
# Regression weighted joc where raw materials regressed to 13 mo lagged CPI
df_joc = df_joc%>%
mutate(joc = (45.5 + 0.17667*burlap + 0.11720*copper_nickel + 0.02263*steelscrap +
0.02464*zinc + -0.08892*aluminum + -0.05234*hides + 0.19107*rubber + 0.03579*plywood + 0.23274*hardwood + -0.03858*crudepetroleum))
# Scale Values to 100
df_joc = df_joc %>%
mutate_each(funs(./.[1]*100), setdiff(names(.), "date"))
# lag CPI by 13 months
df_joc$cpilag13 = dplyr::lead(df_joc$cpi, n=13)
df_joc_mod = df_joc
df_joc_heat = tail(df_joc, n=60) # Last 10 years worth of data
date_vec = as_vector(select(df_joc_heat, date))  # date vector for dates in heatmap
df_joc_heat = select(df_joc_heat, c(-date, -cpilag13)) # remove unused columns
pct <- function(x) {100 * ((x-lag(x, n = 12)) / lag(x, n = 12))} # Define percent function
df_joc_heat = df_joc_heat %>%
mutate_each(funs(pct), c(names(df_joc_heat)))  # Change to YOY% values
df_joc_heat = na.omit(df_joc_heat) # remove NA's generated by change to YOY%
t_df_joc_heat = t(df_joc_heat)  # transpose df_frame
joc_matrix = data.matrix(t_df_joc_heat)  # Convert to matrix
pal = colorRampPalette(c("green", "yellow", "red")) # Set colors to Green Yellow Red
heatmap(joc_matrix, Rowv=NA, Colv=NA, col = pal(256), scale="row", margins=c(6,8), na.rm = TRUE,
labCol= as.Date(date_vec),
xlab = "Months (Red is more inflation)", ylab =  "Raw Materials YoY%",
main = "JOC Raw Materials Heat Map for 5 Years")
df_joc_heat = tail(df_joc, n=240) # Last 10 years worth of data
date_vec = as_vector(select(df_joc_heat, date))
df_date_vec = as.Date(date_vec)
df_joc_heat = select(df_joc_heat, c(-date, -cpilag13)) # remove unused columns
pct <- function(x) {100 * ((x-lag(x, n = 12)) / lag(x, n = 12))} # Define percent function
df_joc_heat = df_joc_heat %>%
mutate_each(funs(pct), c(names(df_joc_heat)))  # Change to YOY% values
df_joc_heat = na.omit(df_joc_heat) # remove NA's
t_df_joc_heat = t(df_joc_heat)  # transpose df_frame
joc_matrix = data.matrix(t_df_joc_heat)  # Convert to matrix
pal = colorRampPalette(c("green", "yellow", "red")) # Set colors to Green Yellow Red
heatmap(joc_matrix, Rowv=NA, Colv=NA, col = pal(256), scale="row", margins=c(5,8), na.rm = TRUE,
labCol= as.Date(date_vec),
xlab = "Months (Red is more inflation)", ylab =  "Raw Materials (YoY%)",
main = "JOC Raw Materials Heat Map for 20 Years (YoY%)")
## *************************************Construct FIG Composite Index *********************************************
# Get labor participation rate, growth of non-financial debt, import prices, percent of business expecting higher selling prices
# CPI included becasue best guess on future CPI is current CPI
library(purrr)
# Future Inflation Guide: Labor Force Participation Rate: CIVPART
#                        JOC Index: joc_eq_wt_diff (calc. above)
#                        Growth of non-financial debt: TODNS
#                        import prices: IR
#                        percent of biz expecting higher prices: PPFDISA066MSFRBNY & FPRMSAMFRBDAL (NY & TX raw materials future price expectations )
# USACPIALLMINMEI =  cpi; TODNS = total_debt; CIVPART = part_rate; IR = import_prices; PPFDISA066MSFRBNY = ny_future_prices; MICH = mich_infl_expect; FPRMSAMFRBDAL = tx_future_prices_raw; M1SL = m1; WM2NS = M2
fredr_set_key("638dc88969bc7f72e2b29da4be268c40")
df_fig = map_dfr(c("CPIAUCSL", "TODNS", "CIVPART", "IR", "PPFDISA066MSFRBNY", "MICH", "FPRMSAMFRBDAL", "GDPC1"), fredr)
df_fig = df_fig %>%
spread(key = series_id, value = value)
## Note: Sometimes fredr returns multiple dates and sometime not. Include next line if dates included
df_fig = select(df_fig, c(-realtime_start, -realtime_end))  # Needed and then not needed
names(df_fig) = c("date", "part_rate", "cpi", "tx_future_prices_raw",  "gdp", "import_prices", "mich_infl_expect", "ny_future_prices", "total_debt")
df_fig = filter(df_fig, date >= "2005-01-01")
df_temp = df_joc_mod[, c("date", "joc_eq_wt", "joc")]
df_fig = merge(df_fig, df_temp, by.x = "date", all.x = TRUE)
df_fig = df_fig %>%
fill(c("part_rate", "tx_future_prices_raw", "import_prices", "mich_infl_expect", "ny_future_prices", "total_debt", "cpi", "gdp", "joc_eq_wt", "joc"), .direction = "down")
# Relativize total debt to nGDP
df_fig$total_debt = df_fig$total_debt / df_fig$gdp
# Scale Values to 100
df_fig = df_fig %>%
mutate_each(funs(./.[1]*100), setdiff(names(.), "date"))
df_fig = select(df_fig, -gdp)  #Remove gdp, no longer needed
# Create Composite Index
df_fig = df_fig %>%
mutate(fig_eq_wt = (part_rate + cpi + tx_future_prices_raw + import_prices + mich_infl_expect + ny_future_prices + total_debt + joc) / 8)
# Relocate cpi
df_fig = df_fig %>% relocate(cpi, .after = fig_eq_wt)
df_fig_heat = tail(df_fig, n=60) # Last 10 years worth of data
date_vec = as_vector(select(df_fig_heat, date))
df_fig_heat = select(df_fig_heat, c(-date)) # remove unused columns
# Change to YOY% values
pct <- function(x) {100 * ((x-lag(x, n = 12)) / lag(x, n = 12))} # Define percent function
df_fig_heat = df_fig_heat %>%
mutate_each(funs(pct), c(names(df_fig_heat)))
df_fig_heat = na.omit(df_fig_heat) # remove NA's
t_df_fig_heat = t(df_fig_heat)  # transpose df_frame
fig_matrix = data.matrix(t_df_fig_heat)  # Convert to matrix
pal = colorRampPalette(c("green", "yellow", "red")) # Set colors to Green Yellow Red
heatmap(fig_matrix, Rowv=NA, Colv=NA, col = pal(256), scale="row", margins=c(6,11), na.rm = TRUE,
labCol= as.Date(date_vec),
xlab = "Months (Red is more inflation)", ylab =  "FIG Components (YoY%)",
main = "Future Inflation Guide - Heat Map for 5 Years (YoY%)")
df_fig_heat = tail(df_fig, n=120) # Last 10 years worth of data
date_vec = as_vector(select(df_fig_heat, date))
df_date_vec = as.Date(date_vec)
df_fig_heat = select(df_fig_heat, c(-date)) # remove unused columns
# Change to YOY% values
pct <- function(x) {100 * ((x-lag(x, n = 12)) / lag(x, n = 12))} # Define percent function
df_fig_heat = df_fig_heat %>%
mutate_each(funs(pct), c(names(df_fig_heat)))
df_fig_heat = na.omit(df_fig_heat) # remove NA's
t_df_fig_heat = t(df_fig_heat)  # transpose df_frame
fig_matrix = data.matrix(t_df_fig_heat)  # Convert to matrix
pal = colorRampPalette(c("green", "yellow", "red")) # Set colors to Green Yellow Red
heatmap(fig_matrix, Rowv=NA, Colv=NA, col = pal(256), scale="row", margins=c(6,11), na.rm = TRUE,
labCol= as.Date(date_vec),
xlab = "Months (Red is more inflation)", ylab =  "FIG Components (YoY%)",
main = "Future Inflation Guide - Heat Map for 10 Years")
df_ecri_fig = read_csv(file = "figdata.csv")
names(df_ecri_fig) = c("date", "ecri_fig", "ecri_fig_level")
df_ecri_fig$date = MDY(df_ecri_fig$date)  # Change date to appropriate date format
df_ecri_fig = na.omit(df_ecri_fig)
# Change from Daily to Monthly
df_ecri_fig = df_ecri_fig %>%
tq_transmute(mutate_fun = to.period, period = "months")
df_ecri_fig$date = ceiling_date(df_ecri_fig$date, "month")
df_ecri_fig = head(df_ecri_fig, n=62)
df_joc_mod =  df_joc_mod %>%
mutate(fig = (45.5 + 0.17667*burlap + 0.11720*copper_nickel + 0.02263*steelscrap +
0.02464*zinc + -0.08892*aluminum + -0.05234*hides + 0.19107*rubber + 0.03579*plywood + 0.23274*hardwood + -0.03858*crudepetroleum))
df_fig_chart = df_fig
# Merge data into one tibble
df_fig_chart = left_join(df_fig_chart, df_ecri_fig, by = "date")
ggplot(df_fig_chart, aes( x= date, y=cpi)) +
geom_line(aes(x = date, y = cpi), color = "red") +
geom_line(aes(x = date, y = fig_eq_wt), color = "green") +
geom_line(aes(x = date, y = ecri_fig_level), color = "black") +
geom_line(aes(x = date, y = joc), color = "purple") +
labs(color = "cpi",
labs( x= "Date"),
labs( y = "cpi")) +
labs(title = "CPI compared to Fig Equal Wt, JOC Raw Materials, ECRI FIG Level") +
labs(subtitle = " Red: CPI; Green: FIG Equal Wt.; Purple: JOC Raw Materials; Black: ECRI FIG")
df_joc_mod =  df_joc_mod %>%
mutate(fig = (45.5 + 0.17667*burlap + 0.11720*copper_nickel + 0.02263*steelscrap +
0.02464*zinc + -0.08892*aluminum + -0.05234*hides + 0.19107*rubber + 0.03579*plywood + 0.23274*hardwood + -0.03858*crudepetroleum))
print(cor(df_joc))
View(df_joc)
?selct
?select
df_temp = subset(df_joc, select = c(-date))
View(df_temp)
cor(df_temp)
View(df_temp)
cor(df_temp)
View(df_temp)
df_temp = ma.omit(df_temp)
df_temp = na.omit(df_temp)
cor(df_temp)
